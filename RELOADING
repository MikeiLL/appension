The Minstrel Hall/Gypsum code reload model requires some explanation. It works
magnificently in Pike, where code reloading is a normal and expected thing; to
do anything like this in Python is considered unusual (it's more normal to run
the server on a simpler model, and just restart processes periodically), but I
doubt there's anything fundamentally preventing it from working just the same.
My trick is to violate the normal principle of object orientation, and to make
"code" and "data" into two completely separate entities; a reload replaces one
and leaves the other untouched. The one critical concern here is that the code
must be able to handle other versions of itself lurking around; it might be in
the hand-over period, with old and new code be running concurrently. Use dicts
for all state, and flat functions, and then just make sure each function runs,
completes its work, and returns, and the job's easy. Consider it like C's kind
of "low level OOP", or a database-driven system where code gets changed a lot.
