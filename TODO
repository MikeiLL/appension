REQUIREMENTS
        Work out Segment Info Display Timing (also change image on mute button)
-- Might be hard but is very necessary.
        Add Navigation and Informational Pages (everything on current site)
        Simple Design and Design Implementation
        Ensure we have all of the Correct Tracks and Versions without Duplicates
        Deploy to World Wide Web (including server configuration)
        Test (load testing, various platforms, browsers)
        Fix issues
        Point Domain Name to it and “publish”
-- All this should be easy enough, and necessary.
        Status/heartbeat URL endpoint
        Monitor: ping heartbeat, email if unsuccessful (for any definition of "unsuccessful")

RECOMMENDATIONS
        Dynamically publish Entire Piece Duration (increases with each new track)
-- Easy, just the sum of the lengths. SELECT sum(length) FROM tracks [WHERE status=1]
        Have all the info pages load in tabs so users can stay on front page with track playing
        Form so users can submit tracks and track details, as opposed to dropbox/email
        Auto-email admin(s) when tracks are submitted
        Admin section to confirm new tracks into the mix
-- Yep, only admins can change status. We just look for that in the filtering.
        Fine-tune player (tracks that fade out get cross-faded, etc)

STRONG DESIRES
        Add the story and/or artist info for each segment to show when user clicks on it as it goes by in player
-- Shouldn't be too hard, is a good reason to use pointers rather than all data in ID3
-- Curating the data is the time-consuming part
-- Might be worth storing some of this in git, rather than the database - GitHub + PRs rather than writing your own edit screens
../stories/%d.txt
        A less simple Design and Design Implementation
        Offer users a UJam.com template to play with in creating their own segment
        Add lyrics from each segment to database, which could be displayed individually or all together
-- Displayed all together is easy enough. Just a pile of textual metadata like the story/artist info. Displaying individually would be rather harder - sync issues beset us already, let's not make 'em worse.

REALLY COOL
        Allow Users to Browse or Search tracks based on tags (style, attitude, instrumentation) and insert into the queue
-- That's a lot more work, leave that for later
-- have to be concerned with spammers and trolls
        Stats on how often a particular track has been inserted - a simple popularity contest
        List of "Hidden gems" - tracks with low popularity

Some html5 players:
antimatter15.com/player/player.html - html5 player with id3
https://github.com/payden/html5-mp3-id3-reader
http://firezenk.github.io/html5player/
https://github.com/FireZenk/html5player
http://www.nacodes.com/2013/04/01/JavaScript-ID3-Reader-MP3-files-and-display-their-ID3-meta-data
http://jonhall.info/how_to/create_id3_tags_using_ffmpeg


Completed:

Database Fields

Get to know PostgreSQL (name derives from Ingres)
    Workflow is important:
      Start a transaction
      Do the work
      Rollback or Commit
    psycopg2
    psql command-line client

Choose a front end player that expects an mp3 stream

Solve 'No handlers could be found for logger (__main__)' messages in _forever.
Solve 'socket.error: [Errno 61] Connection refused' error in test_listener.py

Experimented with numpy.ndarray.dump, numpy.savetxt and data for a 6mb mp3 is about 20mb numpy array in a text file.
